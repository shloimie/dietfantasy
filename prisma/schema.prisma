// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int     @id @default(autoincrement())
  first    String
  last     String
  address  String
  apt      String?
  city     String
  dislikes String?
  county   String?
  zip      String?
  state    String?
  phone    String?
  medicaid Boolean @default(false)
  paused   Boolean @default(false)
  complex  Boolean @default(false)

  schedule Schedule?

  latitude   Float?
  longitude  Float?
  geocodedAt DateTime?
  lat        Float?    @db.DoublePrecision
  lng        Float?    @db.DoublePrecision
  visits     Json      @default("[]")
  sign_token String?   @unique

  signatures Signature[]

  @@map("User") // maps Prisma model User -> table public."User"
}

model Signature {
  id        BigInt   @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  slot      Int
  strokes   Json
  signedAt  DateTime @default(now()) @map("signed_at")
  ip        String?
  userAgent String?  @map("user_agent")

  @@unique([userId, slot])
  @@map("Signature")
}

model Route {
  id      Int     @id @default(autoincrement())
  name    String
  color   String?
  stopIds Int[]   @default([]) @map("stop_ids")

  @@map("Route")
}

model Schedule {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique @map("userId")
  monday    Boolean @default(true)
  tuesday   Boolean @default(true)
  wednesday Boolean @default(true)
  thursday  Boolean @default(true)
  friday    Boolean @default(true)
  saturday  Boolean @default(true)
  sunday    Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Schedule")
}

model CityColor {
  id         Int      @id @default(autoincrement())
  city       String   @unique
  color      String
  updated_at DateTime @default(now())

  @@map("CityColor")
}

model Driver {
  id        Int      @id @default(autoincrement())
  day       String
  name      String
  color     String
  stopIds   Json // array<int> of Stop.id (no FK)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([day])
  @@map("Driver")
}

model Stop {
  id               Int      @id @default(autoincrement())
  day              String
  userId           Int?
  order            Int?
  name             String
  address          String
  apt              String?
  city             String
  state            String
  zip              String
  phone            String?
  dislikes         String?
  lat              Float?
  lng              Float?
  completed        Boolean  @default(false)
  proofUrl         String?
  assignedDriverId Int? // convenience mirror only; NOT a relation
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([day])
  @@map("Stop")
}
