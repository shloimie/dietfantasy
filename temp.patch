--- a/components/DriversDialog.jsx
+++ b/components/DriversDialog.jsx
@@
-  const handleLoadExisting = React.useCallback(async () => {
-    setChooserOpen(false);
-    await loadRoutes();
-    const extras = computeUnassignedGeocoded();
-    if (extras.length) setUnrouted(prev => [...prev, ...extras]);
-    setMapOpen(true);
-  }, [loadRoutes, computeUnassignedGeocoded]);
+  const handleLoadExisting = React.useCallback(async () => {
+    setChooserOpen(false);
+    await loadRoutes();
+
+    // Find geocoded users not present in server routes/unrouted
+    const extras = computeUnassignedGeocoded();
+    if (extras.length) {
+      // Seed them as NEW stops on the server for this day
+      const newStops = extras.map(u => ({
+        userId: u.id,
+        name: u.name || "",
+        address: u.address || "",
+        apt: null,                 // do not include unit in geocode/seed
+        city: u.city || "",
+        state: u.state || "",
+        zip: u.zip || "",
+        phone: u.phone || null,
+        lat: u.lat,
+        lng: u.lng,
+      }));
+      try {
+        const res = await fetch("/api/route/auto-assign", {
+          method: "POST",
+          headers: { "Content-Type": "application/json" },
+          body: JSON.stringify({ day: selectedDay, newStops }),
+        });
+        if (!res.ok) {
+          const t = await res.text().catch(() => "");
+          console.error("auto-assign (seed extras) failed:", t);
+        } else {
+          // Reload to get proper stopIds from server
+          await loadRoutes();
+        }
+      } catch (e) {
+        console.error("Failed seeding extras:", e);
+      }
+    }
+
+    setMapOpen(true);
+  }, [loadRoutes, computeUnassignedGeocoded, selectedDay]);